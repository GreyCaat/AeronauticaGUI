getgenv().Toggle = false
getgenv().ToggleAntiAfk = false
getgenv().ToggleWayLoop = false
getgenv().ToggleFullBright = false

-----------------------------------------------------------------------------------------------------------------------
--CrateEsp
local Name = tostring(game.Players.LocalPlayer)
local camera = workspace.CurrentCamera

local function round(n)
    return math.floor(n + 0.5)
end

local function DrawDrop(drop)

    local DropText = Drawing.new("Text")
    DropText.Visible = false
    DropText.Center = true
    DropText.Outline = true
    DropText.Font = 2
    DropText.Size = 20
    DropText.Color = Color3.new(50, 50, 50)
    DropText.Text = "Crate"

    local Part = Instance.new("Part")
    Part.Size = Vector3.new(0.1, 0.1, 0.1)
    Part.Name = "Yes"
    Part.Transparency = 1
    Part.Anchored = true
    Part.Parent = drop
    Part.CanCollide = false
    Part.Position = drop.Position + Vector3.new(0, -0.35, 0)

    local BoxHandleAdornment = Instance.new("BoxHandleAdornment")
    BoxHandleAdornment.Color3 = Color3.new(255, 255, 255)
    BoxHandleAdornment.Transparency = 0.1
    BoxHandleAdornment.AlwaysOnTop = true
    BoxHandleAdornment.ZIndex = 10
    BoxHandleAdornment.Parent = drop
    BoxHandleAdornment.Adornee = Part
    BoxHandleAdornment.Size = Vector3.new(0.3, 0.3, 0.3)
    BoxHandleAdornment.Visible = false

    local DistanceText = Drawing.new("Text")
    DistanceText.Visible = false
    DistanceText.Center = true
    DistanceText.Outline = true
    DistanceText.Font = 3
    DistanceText.Size = 15
    DistanceText.Color = Color3.new(50, 50, 50)
    DistanceText.Text = "Distance: "

    local Airport = Drawing.new("Text")
    Airport.Visible = false
    Airport.Center = true
    Airport.Outline = true
    Airport.Font = 3
    Airport.Size = 12
    Airport.Color = Color3.new(50, 50, 50)
    Airport.Text = ""

    local function UPDATER()
        local c
        c = game:GetService("RunService").RenderStepped:Connect(function()
            if Toggle then
                if drop then
                    if drop.Transparency == 1 then
                        DropText.Visible = false
                        DistanceText.Visible = false
                        Airport.Visible = false
                        BoxHandleAdornment.Visible = false
                    else
                        BoxHandleAdornment.Visible = true
                        local dropvector, onscreen = camera:WorldToViewportPoint(drop.Position)

                        if onscreen then
                            DropText.Position = Vector2.new(dropvector.X, dropvector.Y + 5)
                            DropText.Visible = true
                            DistanceText.Position  = Vector2.new(dropvector.X, dropvector.Y + 22)
                            DistanceText.Text = "Distance:".. round((drop.Position - game.Workspace[Name].Head.Position).Magnitude)
                            DistanceText.Visible = true

                            Airport.Position  = Vector2.new(dropvector.X, dropvector.Y + 37)

                            local IslandString
                            if drop.Parent then
                                if drop.Parent.Name then
                                    if string.find(drop.Parent.Name, " Crates") then
                                        IslandString = string.gsub(drop.Parent.Name, " Crates", "")
                                    else
                                        IslandString = "Couldnt find Location"
                                    end
                                else
                                    IslandString = "Couldnt find Location"
                                end
                            else
                                IslandString = "Couldnt find Location"
                            end

                            Airport.Text = IslandString
                            Airport.Visible = true
                        else
                            DropText.Visible = false
                            DistanceText.Visible = false
                            Airport.Visible = false
                        end
                    end
                end
            else
                BoxHandleAdornment.Visible = false
                DropText.Visible = false
                DistanceText.Visible = false
                Airport.Visible = false
            end
        end)
    end
    coroutine.wrap(UPDATER)()
end

for i,drop in pairs(game:GetService("Workspace").GrandWorkspace.Scenery.KitCrates:GetDescendants()) do
    if drop.Name == "CratePart" then
        coroutine.wrap(DrawDrop)(drop)
    end
end

spawn(function()
    while wait(10) do
        for i,drop in pairs(game:GetService("Workspace").GrandWorkspace.Scenery.KitCrates:GetDescendants()) do
            if drop.Name == "CratePart" then
                if drop:FindFirstChild("Yes") then
                else    
                    coroutine.wrap(DrawDrop)(drop)
                end
            end
        end
    end
end)

-----------------------------------------------------------------------------------------------------------------------
--AntiAfk
local VU = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
    if ToggleAntiAfk == true then
        VU:CaptureController()
        VU:ClickButton2(Vector2.new())
    end
end)

-----------------------------------------------------------------------------------------------------------------------
--Tween
spawn(function()
    function TweenFunctionV(Speed, TweenThing, GoalPos)
        local endpart = Instance.new("Part")
        endpart.Parent = game.Workspace
        endpart.CanCollide = false
        endpart.Position = GoalPos
        endpart.Anchored = true
        endpart.Transparency = 1
        endpart.Size = Vector3.new(0.5, 0.5, 0.5)

        local TweenService = game:GetService("TweenService")

        function GetTime(Distance, Speed)
            local Time = Distance / Speed
            return Time
        end

        local Distance = (TweenThing.Position - endpart.Position).magnitude
        local Time = GetTime(Distance, Speed)

        local goal = {}
        goal.CFrame = endpart.CFrame

        local NewTweenInfoTable = TweenInfo.new(
            Time, 
            Enum.EasingStyle.Linear, 
            Enum.EasingDirection.Out, 
            0, 
            false, 
            0 
        )

        local Tween = TweenService:Create(TweenThing, NewTweenInfoTable, goal)

        Tween:Play()
        Tween.Completed:Wait()
        endpart:Destroy()
    end
end)

-----------------------------------------------------------------------------------------------------------------------
--Remove
function RemoveParts(plane, Collide)
    for i, v in pairs(plane:GetChildren()) do
        if v:IsA("Part") or v:IsA("MeshPart") then
            if string.find(v.Name, "Color") or v.Name == "ServoPart" then
                v:Destroy()
            elseif string.find(v.Name, "Collision") then
                v.Color = Color3.fromRGB(190, 190, 190)
                v.Material = Enum.Material.SmoothPlastic
                v.Transparency = 0.5
            elseif Collide then
                v.CanCollide = false
            elseif not Collide then
                v.CanCollide = true
            end
        end
    end
end

-----------------------------------------------------------------------------------------------------------------------
--ServiceCeiling - Boat support
function GetServiceCeiling(plane)
    if plane.Specifications.Type.Value == "Boat" then
        return(10)
    else
        return(plane.Specifications.ServiceCeiling.Value)
    end
end

-----------------------------------------------------------------------------------------------------------------------
--Ui Lib
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/GreyCaat/GC-Library/main/Lib.txt", true))()


local main = library:CreateMain("Aeronautica", "also me hello")


local Routes = main:CreateTab("Route-Options")
local Crates = main:CreateTab("Crate-Stuff")
local Teleports = main:CreateTab("Teleports")
local misc = main:CreateTab("Misc.")

--------------

local CrateEsp = Crates:CreateToggle("Crate Esp", function(state)
    if state then
        Toggle = true
    elseif not state then
        Toggle = false
    end
end)


local loopCrates = false
local planeLoopCrates;
local LoopCollectCrates = Crates:CreateToggle("Collect Crates", function(state)
    local PlayerName = tostring(game.Players.LocalPlayer)
    if state == true then
        loopCrates = true
        local counter = 0
    
        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            counter = counter + 1
        end
    
        if counter == 1 then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "You need to be spawned in";
                Button1 = "Understood";
                Duration = math.huge
            })
        else
            for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
                if v.Name == "Head" then
                else
                    planeLoopCrates = v
                end
            end

            repeat wait()
                for i,v in pairs(game:GetService("Workspace").GrandWorkspace.Scenery.KitCrates:GetDescendants()) do
                    if v.Name == "CratePart" and v.Transparency == 0 then
                        local oldpos = v.Position
                        v.Position = planeLoopCrates.PrimaryPart.Position + Vector3.new(0, 0.2, 0)
                        wait(0.1)
                        v.Position = oldpos
                        spawn(function()
                            repeat wait()
                                if loopCrates == false then
                                    v.Position = oldpos
                                end
                            until loopCrates == false
                        end)
                    end
                end
            until loopCrates == false
        end
    elseif state == false then
        loopCrates = false
    end
end)



local TeleAirport = Teleports:CreateDropdown("Airport/Location Teleports")
for i, v in pairs(game:GetService("Workspace").GrandWorkspace.SpawnPoints:GetChildren()) do
    local AirportButton = TeleAirport:CreateDropdownButton(v.Name, function()
        local PlayerName = tostring(game.Players.LocalPlayer)
        local plane;
        local counter = 0

        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            counter = counter + 1
        end

        if counter == 1 then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "You need to be spawned in";
                Button1 = "Understood";
                Duration = math.huge
            })
        else
            for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
                if v.Name == "Head" then
                else
                    plane = v
                end
            end

            if plane.Specifications.Type.Value == "Boat" then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Info";
                    Text = "Not available for boats";
                    Button1 = "Understood";
                    Duration = math.huge
                })
            else
                local loopTelAir;

                RemoveParts(plane)

                local function calculate(feet)
                    local calc = feet / 25
                    return calc
                end

                local feetvalue = GetServiceCeiling(plane)

                loopTelAir = game:GetService("RunService").RenderStepped:Connect(function()
                    local rotaion = CFrame.Angles(math.deg(-90), math.deg(0), math.deg(0))
                    plane.PrimaryPart.CFrame = CFrame.new(plane.PrimaryPart.Position) * rotaion
                end)

                TweenFunctionV(250, plane.PrimaryPart, Vector3.new(plane.PrimaryPart.Position.X, calculate(feetvalue), plane.PrimaryPart.Position.Z))
                
                TweenFunctionV(250, plane.PrimaryPart, Vector3.new(v.PrimaryPart.Position.X, calculate(feetvalue), v.PrimaryPart.Position.Z))

                TweenFunctionV(250, plane.PrimaryPart, Vector3.FromNormalId(Enum.NormalId.Top) + v.PrimaryPart.Position)

                loopTelAir:Disconnect()
            end
        end
    end)
end

local lineloadsave = Teleports:CreateLine()

local infosavetp = Teleports:CreateLabel("Save first then load")
local pos;
local savepos = Teleports:CreateButton("Save Position", function()
    local PlayerName = tostring(game.Players.LocalPlayer)
    local plane;
    for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
        if v.Name == "Head" then
        else
            plane = v
            pos = v.PrimaryPart.Position
        end
    end
end)

local loadpos = Teleports:CreateButton("Load Position", function()
    local plane;
    local PlayerName = tostring(game.Players.LocalPlayer)
    if pos == nil then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Info";
            Text = "Safe a position first!";
            Button1 = "i forgor 💀";
            Duration = math.huge
        })
    else
        local loopTelAir;

        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            if v.Name == "Head" then
            else
                plane = v
            end
        end

        RemoveParts(plane, true)

        local function calculate(feet)
            local calc = feet / 25
            return calc
        end

        local feetvalue = GetServiceCeiling(plane)

        loopTelAir = game:GetService("RunService").RenderStepped:Connect(function()
            local rotaion = CFrame.Angles(math.deg(-90), math.deg(0), math.deg(0))
            plane.PrimaryPart.CFrame = CFrame.new(plane.PrimaryPart.Position) * rotaion
        end)

        TweenFunctionV(250, plane.PrimaryPart, Vector3.new(plane.PrimaryPart.Position.X, calculate(feetvalue), plane.PrimaryPart.Position.Z))
        
        TweenFunctionV(250, plane.PrimaryPart, Vector3.new(pos.X, calculate(feetvalue), pos.Z))

        TweenFunctionV(250, plane.PrimaryPart, pos)

        loopTelAir:Disconnect()

        RemoveParts(plane, false)
    end
end)
local infoloadposboat = Teleports:CreateLabel("Be careful when using with boat")


local infotptomark = Routes:CreateLabel("If you got a marker/waypoint you can tp to it here")
local TpToWaypoint = Routes:CreateButton("Tp to marker", function() 
    local PlayerName = tostring(game.Players.LocalPlayer)
    local plane;
    local originalpos;
    local counter = 0

    for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
        counter = counter + 1
    end

    if counter == 1 then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Info";
            Text = "You need to be spawned in";
            Button1 = "Understood";
            Duration = math.huge
        })
    elseif game:GetService("Workspace").Junk.Guider.GUI.Enabled == false then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Info";
            Text = "Theres no marker";
            Button1 = "Understood";
            Duration = math.huge
        })
    else
        local loopTelAir;

        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            if v.Name == "Head" then
            else
                plane = v
            end
        end

        if plane.Specifications.Type.Value == "Boat" then
            RemoveParts(plane, true)

            local function calculate(feet)
                local calc = feet / 25
                return calc
            end

            local feetvalue = GetServiceCeiling(plane)

            loopTelAir = game:GetService("RunService").RenderStepped:Connect(function()
                if GetServiceCeiling(plane) == 15000 then
                else
                    local rotaion = CFrame.Angles(math.deg(-90), math.deg(0), math.deg(0))
                    plane.PrimaryPart.CFrame = CFrame.new(plane.PrimaryPart.Position) * rotaion
                end
            end)

            TweenFunctionV(200, plane.PrimaryPart, Vector3.new(plane.PrimaryPart.Position.X, calculate(feetvalue), plane.PrimaryPart.Position.Z))
            
            TweenFunctionV(200, plane.PrimaryPart, Vector3.new(game:GetService("Workspace").Junk.Guider.Position.X, calculate(feetvalue), game:GetService("Workspace").Junk.Guider.Position.Z))

            TweenFunctionV(200, plane.PrimaryPart, game:GetService("Workspace").Junk.Guider.Position + Vector3.new(0, 1, 0))

            loopTelAir:Disconnect()

            RemoveParts(plane, false)
        else
            RemoveParts(plane, true)

            local function calculate(feet)
                local calc = feet / 25
                return calc
            end

            local feetvalue = GetServiceCeiling(plane)

            loopTelAir = game:GetService("RunService").RenderStepped:Connect(function()
                if GetServiceCeiling(plane) == 15000 then
                else
                    local rotaion = CFrame.Angles(math.deg(-90), math.deg(0), math.deg(0))
                    plane.PrimaryPart.CFrame = CFrame.new(plane.PrimaryPart.Position) * rotaion
                end
            end)

            TweenFunctionV(250, plane.PrimaryPart, Vector3.new(plane.PrimaryPart.Position.X, calculate(feetvalue), plane.PrimaryPart.Position.Z))
            
            TweenFunctionV(250, plane.PrimaryPart, Vector3.new(game:GetService("Workspace").Junk.Guider.Position.X, calculate(feetvalue), game:GetService("Workspace").Junk.Guider.Position.Z))

            TweenFunctionV(250, plane.PrimaryPart, game:GetService("Workspace").Junk.Guider.Position + Vector3.new(0, 1, 0))

            loopTelAir:Disconnect()

            RemoveParts(plane, false)
        end
    end
end)
local infotptomarkboat = Routes:CreateLabel("Be careful when using with boat")


local lineairshow = Routes:CreateLine()


local infotptowaypoint = Routes:CreateLabel("This is (very) useful for Airshows")


local originalpos4;
local PlayerName4 = tostring(game.Players.LocalPlayer)
local check4;
local plane4;
local loopTelAir111;
local MarkerLoopChecker;
local toggleloopmarker = false
local TpToWaypointLoop = Routes:CreateToggle("Tp to marker (loop)", function(state)
    if state then
        local counter = 0

        for i, v in pairs(game.Workspace[PlayerName4]:GetChildren()) do
            counter = counter + 1
        end

        if counter == 1 then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "You need to be spawned in";
                Button1 = "Understood";
                Duration = math.huge
            })
        elseif game:GetService("Workspace").Junk.Guider.GUI.Enabled == false then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "Theres no marker";
                Button1 = "Understood";
                Duration = math.huge
            })
        else
            local plane

            for i, v in pairs(game.Workspace[PlayerName4]:GetChildren()) do
                if v.Name == "Head" then
                else
                    plane = v
                end
            end
    
            if plane.Specifications.Type.Value == "Boat" then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Info";
                    Text = "Not available for boats";
                    Button1 = "Understood";
                    Duration = math.huge
                })
            else
                toggleloopmarker = true
                for i, v in pairs(game.Workspace[PlayerName4]:GetChildren()) do
                    if v.Name == "Head" then
                    else
                        plane4 = v
                        originalpos4 = v.PrimaryPart.Position
                    end
                end

                RemoveParts(plane4, true)

                loopTelAir111 = game:GetService("RunService").RenderStepped:Connect(function()
                    local rotaion = CFrame.Angles(math.deg(-90), math.deg(0), math.deg(0))
                    plane4.PrimaryPart.CFrame = CFrame.new(plane4.PrimaryPart.Position) * rotaion
                end)

                local function calculate(feet)
                    local calc = feet / 25
                    return calc
                end

                local feetvalue = GetServiceCeiling(plane4)

                TweenFunctionV(250, plane4.PrimaryPart, Vector3.new(plane4.PrimaryPart.Position.X, calculate(feetvalue), plane4.PrimaryPart.Position.Z))

                repeat game:GetService("RunService").RenderStepped:Wait()
                    TweenFunctionV(250, plane4.PrimaryPart, game:GetService("Workspace").Junk.Guider.Position)
                until toggleloopmarker == false

                RemoveParts(plane4, false)
            end
        end
    elseif not state then
        if originalpos4 ~= nil then
            RemoveParts(plane4, false)
            toggleloopmarker = false
            wait(0.1)
            local function calculate(feet)
                local calc = feet / 25
                return calc
            end

            local feetvalue = plane4.Specifications.ServiceCeiling.Value

            TweenFunctionV(250, plane4.PrimaryPart, Vector3.new(originalpos4.X, calculate(feetvalue), originalpos4.Z))

            TweenFunctionV(250, plane4.PrimaryPart, originalpos4)

            loopTelAir111:Disconnect()
        end
    end
end)

local linecargo = Routes:CreateLine()

local infotptowaypoint = Routes:CreateLabel('Only for Supply Drop missions')
local oldpos2;
local TpToWaypointLoopHeightLock = Routes:CreateButton("Complete Supply Drop", function()
    local PlayerName = tostring(game.Players.LocalPlayer)
    local plane;

    local counter = 0

    for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
        counter = counter + 1
    end

    if counter == 1 then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Info";
            Text = "You need to be spawned in";
            Button1 = "Understood";
            Duration = math.huge
        })
    else
        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            if v.Name == "Head" then
            else
                plane = v
            end
        end

        if plane.Specifications.Type.Value == "Boat" then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "Not available for boats";
                Button1 = "Understood";
                Duration = math.huge
            })
        else
            local function SupplyOnly()
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Info";
                    Text = "This is only for Supply Drop missions";
                    Button1 = "Understood";
                    Duration = math.huge
                })
            end

            for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
                if v.Name == "Head" then
                else
                    plane = v
                    oldpos2 = v.PrimaryPart.Position
                end
            end

            if plane.PrimaryPart.FlyScript:FindFirstChild("ServerMissionScript") then
                if plane.PrimaryPart.FlyScript.ServerMissionScript:FindFirstChild("Drop") then
                    local loopTelAir;
            
                    RemoveParts(plane, true)

                    local function calculate(feet)
                        local calc = feet / 25
                        return calc
                    end
            
                    local feetvalue = GetServiceCeiling(plane)
            
                    loopTelAir = game:GetService("RunService").RenderStepped:Connect(function()
                        local rotaion = CFrame.Angles(math.deg(-90), math.deg(0), math.deg(0))
                        plane.PrimaryPart.CFrame = CFrame.new(plane.PrimaryPart.Position) * rotaion
                    end)
            
                    TweenFunctionV(250, plane.PrimaryPart, Vector3.new(plane.PrimaryPart.Position.X, calculate(feetvalue), plane.PrimaryPart.Position.Z))

                    TweenFunctionV(250, plane.PrimaryPart, Vector3.new(game:GetService("Workspace").Junk.Guider.Position.X, calculate(feetvalue), game:GetService("Workspace").Junk.Guider.Position.Z))
                    
                    plane.PrimaryPart.Anchored = true
                    repeat wait(0.2)
                        plane.PrimaryPart.FlyScript.ServerMissionScript.Connector:FireServer()
                    until plane.PrimaryPart.FlyScript.ServerMissionScript.Drop.Amount.Value == 0
                    plane.PrimaryPart.Anchored = false
            
                    TweenFunctionV(250, plane.PrimaryPart, Vector3.new(oldpos2.X, calculate(feetvalue), oldpos2.Z))

                    TweenFunctionV(250, plane.PrimaryPart, oldpos2 + Vector3.new(0, 50, 0))
            
                    loopTelAir:Disconnect()

                    RemoveParts(plane, false)
                else
                    SupplyOnly()
                end
            else
                SupplyOnly()
            end
        end
    end
end)


local full;
local FullBright = misc:CreateToggle("Always day", function(state)
    if state then
        ToggleFullBright = true

        full = game:GetService("RunService").RenderStepped:Connect(function()
            game.Lighting.TimeOfDay = "12:00:00"
        end)
    elseif not state then
        ToggleFullBright = false
        full:Disconnect()
    end
end)


local lineLockPlaneFasterPlane = misc:CreateLine()


local TextFasterPlane = misc:CreateLabel("Use these 2 below to farm minutes")


local AntiAfk = misc:CreateToggle("Anti Afk", function(state)
    if state then
        ToggleAntiAfk = true
    elseif not state then
        ToggleAntiAfk = false
    end
end)


local LockPlane = misc:CreateToggle("Lock Plane/Boat", function(state)
    local plane;
    local PlayerName = tostring(game.Players.LocalPlayer)
    if state then
        local counter = 0

        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            counter = counter + 1
        end

        if counter == 1 then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "You need to be spawned in";
                Button1 = "Understood";
                Duration = math.huge
            })
        else
            for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
                if v.Name == "Head" then
                else
                    plane = v
                end
            end
            plane.PrimaryPart.Anchored = true
        end
    elseif not state then
        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            if v.Name == "Head" then
            else
                v.PrimaryPart.Anchored = false
            end
        end
    end
end)


local lineLockPlaneFasterPlane = misc:CreateLine()


local TextFasterPlane = misc:CreateLabel("Takeoff first, then turn on")


local loopFasterPlane;
local oldmaxspeed;
local planefast;
local FasterPlane = misc:CreateToggle("Faster Plane/Boat", function(state)
    local PlayerName = tostring(game.Players.LocalPlayer)
    
    if state then
        local counter = 0

        for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
            counter = counter + 1
        end

        if counter == 1 then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Info";
                Text = "You need to be spawned in";
                Button1 = "Understood";
                Duration = math.huge
            })
        else
            for i, v in pairs(game.Workspace[PlayerName]:GetChildren()) do
                if v.Name == "Head" then
                else
                    planefast = v
                end
            end

            if planefast.Specifications.Type.Value == "Boat" then
                local function calculate(speed)
                    local calc = speed / 14.45
                    return calc
                end

                oldmaxspeed = planefast.Specifications.MaxSpeed.Value

                loopFasterPlane = game:GetService("RunService").RenderStepped:Connect(function()
                    planefast.Specifications.MaxSpeed.Value = 10000
                    if planefast.PrimaryPart.BodyVelocity.Velocity.X >= calculate(oldmaxspeed*4) then
                    elseif planefast.PrimaryPart.BodyVelocity.Velocity.Y >= calculate(oldmaxspeed*4) then
                    elseif planefast.PrimaryPart.BodyVelocity.Velocity.Z >= calculate(oldmaxspeed*4) then
                    else
                        planefast.PrimaryPart.BodyVelocity.Velocity = planefast.PrimaryPart.BodyVelocity.Velocity * 2
                    end
                end)
            else
                local function calculate(speed)
                    local calc = speed / 14.45
                    return calc
                end

                oldmaxspeed = planefast.Specifications.MaxSpeed.Value

                loopFasterPlane = game:GetService("RunService").RenderStepped:Connect(function()
                    planefast.Specifications.MaxSpeed.Value = 10000
                    if planefast.PrimaryPart.BodyVelocity.Velocity.X >= calculate(oldmaxspeed + oldmaxspeed / 1.55) then
                    elseif planefast.PrimaryPart.BodyVelocity.Velocity.Y >= calculate(oldmaxspeed + oldmaxspeed / 1.55) then
                    elseif planefast.PrimaryPart.BodyVelocity.Velocity.Z >= calculate(oldmaxspeed + oldmaxspeed / 1.55) then
                    else
                        planefast.PrimaryPart.BodyVelocity.Velocity = planefast.PrimaryPart.BodyVelocity.Velocity * 1.07
                    end
                end)
            end
        end
    elseif not state then
        if loopFasterPlane then
            planefast.Specifications.MaxSpeed.Value = oldmaxspeed
            loopFasterPlane:Disconnect()
        end
    end
end)